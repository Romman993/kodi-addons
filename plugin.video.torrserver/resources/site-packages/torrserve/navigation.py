# -*- coding: utf-8 -*-
import os
import json
import time
import urllib

import xbmc
import xbmcgui
import xbmcplugin

from torrserve.client import client, touch
from torrserve.config import TORRSERVED_HOST, ADDON_PATH
from torrserve.simpleplugin import Plugin
from torrserve.utils import humanizeSize, notify, settingsIsOpen, parseName

plugin = Plugin()
translate = plugin.initialize_gettext()


@plugin.action()
def root():
    resp = client("/echo")
    if not resp:
        notify(translate("Server is down") % TORRSERVED_HOST)
        return
    else:
        listing = get_listing("index")
        return Plugin.create_listing(listing, category="TorrServer:v "+resp)


@plugin.action("torrents")
def torrents(params):
    listing = []
    if params.mod == "list":
        listing = get_listing("torrents")
    elif params.mod == "files":
        listing = makeFileList(json.loads(params.torr))
    elif params.mod == "delete":
        client("/torrent/rem", post_data={"Hash": params.hash})
        notify("Deleted!")
        xbmc.executebuiltin("Container.Refresh")
        return
    elif params.mod == "add":
        client("/torrent/add", post_data={"Link": params.magnet, "Info": params.info})
        notify("Saved!")
        return
    return Plugin.create_listing(listing, content="videos", category="Torrents")


@plugin.action("search")
def search(params):
    listing = []
    content = "videos"
    page = 1
    update = False
    category = "Search"
    if params.mod == "index":
        listing = get_listing("search")
    else:
        category = category+"/"+params.mod
        result = query = ""
        dialog = xbmcgui.Dialog()
        if params.mod == "Discover":
            content=""
            if params.page:
                page = params.page
                update=True
            results = client("/search/movie", get_data={"type":"discover", "primary_release_year":2018, "sort_by": "popularity.desc", "page": page})
        else:
            query = dialog.input(translate('Search ' + params.mod), type=xbmcgui.INPUT_ALPHANUM)
            content = "videos"
            if query == "":
                return Plugin.create_listing(listing, succeeded=False)
            results = client("/search/" + params.mod.lower()[:-1], get_data={'page': page, 'type': "search", "language": 'ru', 'query': query})
        for i in results:
            item = []
            if params.mod == "Shows":
                item = makeTvShowItem(i)
            else:
                item = makeMovieItem(i)
            listing.append(item)

        if len(listing) > 19 and params.mod == "Discover":
            listing.append({"label": "Next Page >", "url": plugin.get_url(action='search', mod=params.mod, page=int(page)+1)})
    return Plugin.create_listing(listing, succeeded=True, content=content, update_listing=update, category="Search")



@plugin.action("show_torrents")
def show_torrents(params):
    info = '{"TmdbID": "'+params.id+'", "VideoType": "'+params.type+'"}'
    filter = params.year
    title = params.title
    if(params.type == 'tvshow'):
        info = '{"TmdbID": "'+params.id+'", "VideoType": "show"}'
        pSelSeason = xbmcgui.Dialog()
        list = ["Season %d"% x for x in range(1,int(params.season)+1)]
        list.insert(0, "All")
        ret = pSelSeason.select("Select Season", list)
        if ret != 0:
            selSeason = str(ret)
            filter = "S0"+selSeason+"|0"+selSeason+"x"
        else:
            filter = ""
    resp = client("/search/torrent", get_data={'query': title, 'ft': filter})
    list = []
    if resp is None:
        return False

    for tor in resp:
        size = 0
        try:
            if (tor['Size'][-2:] == u"МБ" or tor['Size'][-2:].lower() == "mb"):
                size = int(tor['Size'][:3]) * 2<<19
            else:
                size = float(tor['Size'][:-3]) * float(2<<29)
        except:
            pass
        name = parseName(tor['Name'])
        if tor['PeersUl'] >= 0:
            name = "%s [U:%d|D:%d]" % (name, tor['PeersUl'], tor['PeersDl'])
        list.append({
            'label': name,
            'info': {'video': {'size': size, 'mediatype': 'video'}},
            'url': plugin.get_url(action="play_now", magnet=tor['Magnet']),
            'is_folder': False,
            "is_playable": True,
            'context_menu': [(translate('Add to DB'), 'RunPlugin('+plugin.get_url(action='torrents', mod='add', magnet=tor['Magnet'], info=info)+')')],
        })
    return Plugin.create_listing(list, succeeded=True, content="videos", sort_methods=xbmcplugin.SORT_METHOD_SIZE, cache_to_disk=True)


@plugin.action()
def settings(params):
    if params.mod == "open":
        resp = client("/settings/read", post_data={"read": 1})
        for k, v in resp.items():
            if k == "CacheSize" or k == "PreloadBufferSize":
                v = (v / 1024) / 1024
            plugin.set_setting(k, str(v).lower())
        plugin.addon.openSettings()
        while settingsIsOpen():
            continue

        jset = {
            "CacheSize": plugin.get_setting("CacheSize", True) * 1024 * 1024,
            "PreloadBufferSize": plugin.get_setting("PreloadBufferSize", True) * 1024 * 1024,
            "RetrackersMode": plugin.get_setting("RetrackersMode", True),
            "DisableTCP": plugin.get_setting("DisableTCP", True),
            "DisableUTP": plugin.get_setting("DisableUTP", True),
            "DisableUPNP": plugin.get_setting("DisableUPNP", True),
            "DisableDHT": plugin.get_setting("DisableDHT", True),
            "DisableUpload": plugin.get_setting("DisableUpload", True),
            "Encryption": plugin.get_setting("Encryption", True),
            "DownloadRateLimit": plugin.get_setting("DownloadRateLimit", True),
            "UploadRateLimit": plugin.get_setting("UploadRateLimit", True),
            "ConnectionsLimit": plugin.get_setting("ConnectionsLimit", True)
        }
        client("/settings/write", post_data=jset)
        client("/torrent/restart")


@plugin.action("play")
def play(params):
    touch(TORRSERVED_HOST + params.link)
    hash = params.link[17:57]
    success = makePreloadDialog(hash)
    return Plugin.resolve_url(TORRSERVED_HOST + params.link.replace('/preload/', '/view/'), succeeded=success)


@plugin.action("play_now")
def play_now(params):
    pDialog = xbmcgui.DialogProgress()
    pDialog.create("TorrServer", "Wait for info....")
    success = False
    counter = 0
    selFile = None
    while True:
        if pDialog.iscanceled() :
            pDialog.close()
            client("/torrent/drop", post_data={"Hash": params.magnet[20:60]})
            break
        time.sleep(0.5)
        stat = client("/torrent/play", get_data={"stat": "true", "link": params.magnet, })
        if stat is None or len(stat['FileStats']) == 0:
            counter += 1
            if counter < 60:
                time.sleep(0.5)
                continue
            else:
                pDialog.close()
                break
        if len(stat['FileStats']) > 1 and selFile is None:
            sDialog = xbmcgui.Dialog()
            filelist = []
            for f in stat['FileStats']:
                filelist.append(f['Path'])
            sel = sDialog.select('Choose a file', filelist)
            if sel == -1:
                client("/torrent/drop", post_data={"Hash": stat['Hash']})
                break
            else:
                selFile = sel
                continue
        elif len(stat['FileStats']) == 1 and selFile is None:
            selFile = 0
            continue
        else:
            pDialog.close()
            preload = touch(TORRSERVED_HOST + "/torrent/play?link="+params.magnet+"&file="+str(selFile))
            success = makePreloadDialog(stat['Hash'])
            break
        
    return Plugin.resolve_url(TORRSERVED_HOST + "/torrent/play?link="+params.magnet+"&file="+str(selFile), succeeded=success)


def get_listing(params):
    listing = []
    if params == "index":
        listing.append({
            'label': translate("Torrents List"),
            'url': plugin.get_url(action='torrents', mod='list'),
            'icon': os.path.join(ADDON_PATH, "resources", "img", "list.png"),
            'is_folder': True
        })
        listing.append({
            'label': translate("Search"),
            'url': plugin.get_url(action='search', mod='index'),
            'icon': os.path.join(ADDON_PATH, "resources", "img", "search.png"),
            'is_folder': True
        })
        listing.append({
            'label': translate("Settings"),
            'icon': os.path.join(ADDON_PATH, "resources", "img", "settings.png"),
            'url': plugin.get_url(action='settings', mod='open'),
            'is_folder': False
        })
    elif params == "search":
        listing.append({
            'label': translate("Search Movies"), 'url': plugin.get_url(action='search', mod='Movies'), 'icon': os.path.join(ADDON_PATH, "resources", "img", "movies.png"),
        })
        listing.append({
            'label': translate("Search Shows"), 'url': plugin.get_url(action='search', mod='Shows'), 'icon': os.path.join(ADDON_PATH, "resources", "img", "tv.png"),
        })
        listing.append({
            'label': translate("Search Discover"), 'url': plugin.get_url(action='search', mod='Discover'), 'icon': os.path.join(ADDON_PATH, "resources", "img", "top.png"),
        })
    elif params == "torrents":
        request = int(plugin.get_setting("without_info", True))
        resp = client("/torrent/list", post_data={"Request": request})
        for t in resp:
            if t['Info'] == "{}":
                listing.append({
                        "label": "[" + humanizeSize(t['Length']) + "] "+parseName(t['Name']),
                        "url": plugin.get_url(action="torrents", mod="files", torr=json.dumps(t)),
                        "icon": os.path.join(ADDON_PATH, "resources", "img", "magnet.png"),
                        "context_menu": [(
                            translate("Delete from DB"),
                            "RunPlugin(%s)" % plugin.get_url(action="torrents", mod="delete", hash=t["Hash"]),
                        )],
                })
                
            else:
                i = json.loads(t['Info'])
                info = client('/search/'+i['VideoType']+"/"+i['TmdbID'])
                item = []
                if i['VideoType'] == "show":
                    item = makeTvShowItem(info)
                else:
                    item = makeMovieItem(info)
                item['label'] = "[" + humanizeSize(t['Length']) + "] "+parseName(t['Name'])
                item['url'] = plugin.get_url(action="torrents", mod="files", torr=json.dumps(t))
                item['context_menu'] = [(translate("Delete from DB"), "RunPlugin(%s)" % plugin.get_url(action="torrents", mod="delete", hash=t["Hash"]))]
                listing.append(item)
    return listing

def makeFileList(response):
    listing = []
    for f in response['Files']:
        listing.append({
            "label": parseName(f['Name']),
            "title": f['Name'],
            "url": plugin.get_url(action="play", link=f['Preload']),
            "is_playable": True,
            "info": {"video": {
                'size': f['Size'],
                'playcount': int(f['Viewed'])
            }}
        })
    return listing

def makeMovieItem(i, fromSearch=False):
    title = original_title = year = tagline = trailer = ""
    year_int = IMDBid = 0
    mediatype = "movie"
    poster = i['poster_path']
    if poster == "":
        poster = "https://raw.githubusercontent.com/YouROK/TorrServe/master/pics/emptyposter.png"
    try:
        title = i['title']
        original_title = i['original_title'].encode("utf-8")
        year = i['release_date']
        year_int = int(i['release_date'][:4])
        tagline = i['tagline']
        IMDBid = i['imdb_id']
        id = i['trailers']['youtube'][0]['source'][32:]
        trailer = "plugin://plugin.video.youtube/play/?video_id="+id
    except:
        trailer = ""
    casts = []
    for c in i['credits']['cast']:
        casts.append({
            'name': c['name'],
            'role': c['character'],
            'thumbnail': "https://image.tmdb.org/t/p/w200"+c['profile_path'],
            'order': c['order']
        })

    item = {
            'label': title,
            'label2': year[:4],
            'thumb': poster,
            'poster': poster,
            'fanart': i['backdrop_path'],
            'url': plugin.get_url(
                    action='show_torrents',
                    id=i['id'],
                    type=mediatype,
                    title=original_title,
                    year=year_int,
                ),
            'info': {
                "video": {
                    'plot': i['overview'],
                    'plotoutline': i['overview'],
                    'mediatype': mediatype,
                    'year': year_int,
                    'title': title,
                    'originaltitle': original_title,
                    'tagline': tagline,
                    'trailer': trailer,
                    'imdbnumber':IMDBid ,
                    'votes': i['vote_count'],
                    'rating': float(i['vote_average']),
                    'setid': int(i['id']),
                },
            },
            'cast': casts,
        }
    return item

def makeTvShowItem(i, fromSearch=False):
    title = original_title = year = trailer = ""
    year_int = IMDBid = season = 0
    mediatype = "tvshow"
    poster = i['poster_path']
    if poster == "":
        poster = "https://raw.githubusercontent.com/YouROK/TorrServe/master/pics/emptyposter.png"
    try:
        title = i['name']
        original_title = i['original_name'].encode("utf-8")
        year = i['first_air_date']
        season = i['number_of_seasons']
        year_int = int(i[year])
        id = i['trailers']['youtube'][0]['source'][32:]
        trailer = "plugin://plugin.video.youtube/play/?video_id="+id
    except:
        year_int = 0
    casts = []
    for c in i['credits']['cast']:
        casts.append({
            'name': c['name'],
            'role': c['character'],
            'thumbnail': "https://image.tmdb.org/t/p/w200"+c['profile_path'],
            'order': c['order']
        })

    item = {
        'label': title,
        'label2': str(season),
        'thumb': poster,
        'poster': poster,
        'fanart': i['backdrop_path'],
        'url': plugin.get_url(
                    action='show_torrents',
                    id=i['id'],
                    type=mediatype,
                    title=original_title,
                    season=season
                ),
        'info': {
            "video": {
                'premiered': year,
                'aired': year,
                'plot': i['overview'],
                'plotoutline': i['overview'],
                'mediatype': mediatype,
                'year': year_int,
                'title': title,
                'originaltitle': original_title,
                'season': season,
                'trailer': trailer,
                'imdbnumber':IMDBid ,
                'votes': i['vote_count'],
                'rating': float(i['vote_average']),
                'setid': int(i['id']),
            },
        },
        'cast': casts,
    }

    return item

def makePreloadDialog(hash):
    if plugin.get_setting("disable_dialog", True):
        return True
    pDialog = xbmcgui.DialogProgress()
    pDialog.create("TorrServer", "Wait for info....")
    success = False
    counter = 0
    while True:
        if pDialog.iscanceled() :
            pDialog.close()
            client("/torrent/drop", post_data={"Hash": hash})
            break
        time.sleep(0.5)
        stat = client("/torrent/stat", post_data={"Hash": hash})
        if stat is None:
            counter += 1
            if counter < 60:
                time.sleep(0.5)
                continue
            else:
                pDialog.close()
                break
        name = parseName(stat['Name'])
        downSpeed = humanizeSize(stat['DownloadSpeed'])
        preloadedBytes = stat['PreloadedBytes']
        preloadSize = stat['PreloadSize']
        line2 = translate("line2") % (stat['ConnectedSeeders'], stat['ActivePeers'], stat['TotalPeers'])
        line3 = u"D: {0}/сек [{1}/{2}]".format(downSpeed, humanizeSize(preloadedBytes), humanizeSize(preloadSize))
        if preloadSize > 0 and preloadedBytes < preloadSize:
            prc = preloadedBytes * 100 / preloadSize
            if prc > 100:
                prc = 100
            pDialog.update(prc, name, line2, line3)
        elif preloadedBytes > preloadSize:
            success = True
            pDialog.close()
            break
    return success

def run():
    plugin.run()
